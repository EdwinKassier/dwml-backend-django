version: '3.8'

services:
  # Redis - Message broker and result backend for Celery
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Django web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.10
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=sqlite:///db.sqlite3
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - REDIS_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN:-}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app/backend:ro
      - sqlite_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - app_network

  # Celery worker - Background task processor
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.10
    command: celery -A config worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=sqlite:///db.sqlite3
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app/backend:ro
      - sqlite_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    networks:
      - app_network

  # Celery Beat - Periodic task scheduler
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.10
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=sqlite:///db.sqlite3
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-True}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app/backend:ro
      - sqlite_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    networks:
      - app_network

  # Flower - Celery monitoring web UI (optional)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.10
    command: celery -A config flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - ./backend:/app/backend:ro
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    networks:
      - app_network

volumes:
  sqlite_data:
  redis_data:

networks:
  app_network:
    driver: bridge
